#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4]; // int max light sources affecting the entity
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;
in vec3 pass_textureBlendColor;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D shadowMap;

uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){
    float objectNearestLight = texture(shadowMap, shadowCoords.xy).r;
    float lightFactor = 1.0;
    if (shadowCoords.z > objectNearestLight) {
        lightFactor = 1.0 - (shadowCoords.w * 0.4);
    }

    // texture blending
    float backTextureAmount = 1 - (pass_textureBlendColor.r + pass_textureBlendColor.g + pass_textureBlendColor.b);
    vec2 tiledCoords = pass_textureCoords * 40.0;
    vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoords) * pass_textureBlendColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoords) * pass_textureBlendColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoords) * pass_textureBlendColor.b;

    vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

    // lighting
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for (int i=0;i<4;i++) {
        float distance = length(toLightVector[i]);
        float attenuationFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitLightVector = normalize(toLightVector[i]);
        float nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1, 0.0);
        vec3 lightDirection = -unitVectorToCamera;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / attenuationFactor;
        totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i]) / attenuationFactor;
    }

    totalDiffuse = max(totalDiffuse * lightFactor, 0.5) ; // ambient light value

    out_Color = vec4(totalDiffuse, 1.0) * totalColor + vec4 (totalSpecular, 1.0);
    out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}